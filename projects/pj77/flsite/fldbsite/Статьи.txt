========================= Статья 1 ==========================
Название статьи: Flask
Текст статьи: Фреймворк для создания веб-приложений на языке программирования Python, использующий набор инструментов Werkzeug, а также шаблонизатор Jinja2. Относится к категории так называемых микрофреймворков — минималистичных каркасов веб-приложений, сознательно предоставляющих лишь самые базовые возможности.

========================= Статья 2 ==========================
Название статьи: Введение
Текст статьи: Flask — это небольшой и легкий веб-фреймворк, написанный на языке Python, предлагающий полезные инструменты и функции для облегчения процесса создания веб-приложений с использованием Python. Он обеспечивает гибкость и является более доступным фреймворком для новых разработчиков, так как позволяет создать веб-приложение быстро, используя только один файл Python. Flask — это расширяемая система, которая не обязывает использовать конкретную структуру директорий и не требует сложного шаблонного кода перед началом использования.

========================= Статья 3 ==========================
Название статьи: Добро пожаловать во Flask
URL статьи: framework-flask-intro
Текст статьи: 
Добро пожаловать в документацию по Flask. Она разбита на следующие части. Рекомендуем начать с раздела Инсталляция, затем заглянуть в Быстрый старт. Помимо раздела «Быстрый старт», есть и более детальное руководство - Учебник, по которому можно создать вместе с Flask хоть и небольшое, но полноценное приложение. Если вы хотите погрузиться во «внутренности» Flask, посмотрите документацию по API (перевод на начальной стадии). Общие шаблоны описаны в разделе Заготовки для Flask.

========================= Статья 4 ==========================
Название статьи: Предисловие
URL статьи: framework-flask-start
Текст статьи: 
<p>Перед началом работы с Flask начните отсюда. Надеемся, вы получите ответы на некоторые вопросы о задачах и назначении проекта, а также узнаете о том, когда вам следует, а когда не следует его использовать.</p>
<h4>Что означает «микро»? </h4>
<p>“Микро” не означает, что ваше веб-приложение целиком помещается в один файл с кодом на Python, хотя, конечно же это может быть и так. Также, это не означает, что Flask испытывает недостаток функциональности. «Микро» в слове «микрофреймворк» означает, что Flask стремится придерживаться простого, но расширяемого ядра. Flask не будет решать за вас многие вещи, например, какую базу данных использовать. А те решения, которые он может принять, например, который из движков для работы с шаблонами использовать, легко изменить. Всё остальное зависит от вас, таким образом, может оказаться, что Flask - всё, что вам нужно, и ничего лишнего.</p>
<p>По умолчанию, Flask не включает уровень абстракции баз данных, валидации форм или каких-то иных, для чего уже существуют различные занимающиеся этим библиотеки. Вместо этого, Flask поддерживает расширения для добавления подобной функциональности в ваше приложение, таким образом, как если бы это было реализовано в самом Flask. Многочисленные расширения обеспечивают интеграцию с базами данных, валидацию форм, обработку загрузок на сервер, различные открытые технологии аутентификации и так далее. Flask может быть «микро», но при этом он готов для использования в реальных задачах для самых разнообразных нужд.</p>
<h4>Конфигурация и Соглашения</h4>
<p>Flask имеет много параметров конфигурации с разумными значениями по умолчанию, и мало предварительных соглашений. По соглашению, шаблоны и статические файлы хранятся в поддиректориях внутри дерева исходных текстов на Python, с названиями templates и static соответственно. Хотя это можно и поменять, обычно этого делать не стоит, особенно в самом начале работы.</p>
<h4>Расти вместе с Flask</h4>
<p>Однажды, скачав и запустив Flask, вы найдёте в сообществе множество доступных его расширений, для их интеграции в ваш реально работающий проект. Команда разработки ядра Flask рассматривает расширения и гарантирует, что одобренные расширения не перестанут работать с будущими релизами.</p>
<p>Пока ваша кодовая база растёт, вы вольны принимать уместные для вашего проекта решения. Flak обеспечит простейший слой для склейки, выполненный настолько хорошо, насколько это позволяет сделать Python. Вы можете реализовать расширенные шаблоны в SQLAlchemy или в ином средстве для работы с БД, в необходимых случаях применить надёжные нереляционные базы данных и использовать преимущества изначально не предназначенных для работы с фреймворками средств, построенных для работы с WSGI - веб интерфейсом для языка Python.</p>
<p>Flask для настройки его поведения содержит множество крючков (хуков). Если вам нужны дополнительные настройки, класс Flask построен, чтобы быть готовым к созданию подклассов.</p>

========================= Статья 5 ==========================
Название статьи: Схема базы данных
URL статьи: framework-flask-database
Текст статьи: 
<p>Сперва мы хотим создать схему базы данных. Это действие выполняется очень просто, так как этому приложению нужна одна единственная таблица, и мы желаем поддерживать только SQLite. Просто поместите следующий текст в файл с именем <i>schema.sql</i> в только что созданной папке flaskr </p>
<div><img width=100% src="1.jpg"></div>
<p>Эта схема состоит из единственной таблице с названием entries, и каждая запись в ней содержит поля id, title и text. id это автоинкрементируемое целое, которое одновременно является первичным ключом, а два других поля - это строки, которые не могут быть пустыми.</p>